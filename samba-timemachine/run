#!/bin/bash
set -eu -o pipefail
IMAGE_NAME=samba-timemachine
PLATFORMS="linux/amd64,linux/arm64"
TESTHOST=carbon

build () {
  docker build -t "${IMAGE_NAME}:tmp" -f Dockerfile .
}

clean () {
  docker image rm "${IMAGE_NAME}:tmp" || true
  docker-compose down --remove-orphans
}

_up () {
  build
  docker-compose up --remove-orphans --detach
}

_down () {
  docker-compose down --remove-orphans
}

_goss_test() {
  export PUID=1234 PGID=4321 USER=testuser PASS=Password123 QUOTA=1234 LOG_LEVEL=4 
  _up
  sleep 5
  docker-compose exec samba-timemachine bash -c '/${GOSS_DST}/goss --gossfile /${GOSS_DST}/tests/goss-live-tests.yaml validate'
  docker-compose exec samba-timemachine bash -c '/${GOSS_DST}/goss --gossfile /${GOSS_DST}/tests/goss-healthcheck-tests.yaml validate'
  _down
  unset PUID PGID USER PASS QUOTA LOG_LEVEL 
}

_trivy() {
  build
  trivy image "${IMAGE_NAME}:tmp"
}

usage() {
  echo "./run build - Build a local image called ${IMAGE_NAME}:tmp"
  echo "./run test - Builds a local image and runs goss tests against it"
  echo "./run trivy - Builds a local image and runs the trivy scanner against it"
  echo "./run release - Tests and then releases to dockerhub a multiarch version of the latest tag"
  echo "./run copyToTestHost - Copies ${IMAGE_NAME}:tmp to ${TESTHOST}"
  echo "./run timemachineLogs - Gathers timemachine logs from macOS"
}

find_release(){
  TAG="$(git tag | sort -n | tail -n 1)"
  export TAG
  git checkout "${TAG}"
}

release() {
  export DOCKER_CLI_EXPERIMENTAL=enabled
  docker buildx use builder || docker buildx create --name builder
  docker buildx inspect --bootstrap
  docker buildx build \
    --platform "${PLATFORMS}" \
    -t "timjdfletcher/${IMAGE_NAME}:${TAG}" --push .
  docker buildx build \
    --platform "${PLATFORMS}" \
    -t "timjdfletcher/${IMAGE_NAME}:latest" --push .
}

timemachineLogs () {
  filter='processImagePath contains "backupd" and subsystem beginswith "com.apple.TimeMachine"'

  # show the last 12 hours
  start="$(date -j -v-12H +'%Y-%m-%d %H:%M:%S')"

  echo ""
  echo "[History (from $start)]"
  echo ""

  log show --style syslog --info --start "$start" --predicate "$filter"

  echo ""
  echo "[Following]"
  echo ""

  log stream --style syslog --info --predicate "$filter"
}

copyToTestHost () {
    build
    size=$(docker image inspect samba-timemachine:tmp | jq -r '.[0].Size')
    docker save  "${IMAGE_NAME}:tmp" |\
    pigz -c |\
    pv -s "${size}" |\
    ssh -C "${TESTHOST}" "pigz -d | docker load"
}

CMD=${1:-}

shift || true
case ${CMD} in
    up) _up ;;
    down) _down ;;
    build) build ;;
    clean) clean ;;
    test) _goss_test ;;
    trivy) _trivy ;;
    copyToTestHost) copyToTestHost ;;
    timemachineLogs) timemachineLogs ;;
    release) find_release && clean && _goss_test && _trivy && release ;;
    *) usage ;;
esac
